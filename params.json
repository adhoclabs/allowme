{
  "name": "Allowme",
  "tagline": "Simple library to handle Android M permissions",
  "body": "# AllowMe\r\n\r\nAllowMe simple library to handle Android M permissions easily.\r\n \r\n# Gradle Dependency\r\n\r\n[![Release](https://img.shields.io/github/release/aitorvs/allowme.svg?label=jitpack)](https://jitpack.io/#aitorvs/allowme)\r\n\r\n\r\n### Repository\r\n\r\n```gradle\r\nrepositories {\r\n    maven { url \"https://jitpack.io\" }\r\n}\r\n```\r\n\r\n### Dependency\r\n\r\n```gradle\r\ndependencies {\r\n\r\n    // ... other dependencies here\r\n\r\n    compile 'com.github.aitorvs:allowme:0.3.2'\r\n}\r\n```\r\n--\r\n\r\n# Basics\r\n\r\nThe library simplifies the task of requesting permissions for Android M. Just one call and one callback\r\nare enough.\r\n\r\n## Usage\r\n\r\n1. Extend your activity from AllowMeActivity (which extends `AppCompatActivity`)\r\n \r\n ```java\r\n public class MyPermissionsActivity extends AllowMeActivity {\r\n    //... more code here\r\n    \r\n }\r\n ```\r\n\r\n2. Request the permission and register the callback for handling. All in one call\r\n\r\n```java\r\n        //... more code here\r\n        \r\n        if (!AllowMe.isPermissionGranted(permission)) {\r\n            new AllowMe.Builder()\r\n                    .setPermissions(permission)\r\n                    .setRationale(rationale)\r\n                    .setPrimingMessage(primingMessage)\r\n                    .setRationaleThemeId(themeId)\r\n                    .setCallback(new AllowMeCallback() {\r\n                        @Override\r\n                        public void onPermissionResult(int requestCode, PermissionResultSet result) {\r\n                            if (result.isGranted(permission)) {\r\n                                //... permission is granted, handle here\r\n                            }\r\n                        }\r\n                    }).request(requestCode);\r\n        } else {\r\n            //... handle permission already granted\r\n        }\r\n```\r\n\r\n - `permission` is the permission you need to request\r\n - `rationale` is optional and it is the string message to show when the user denies the permission for the first time\r\n - `primingMessage` is optional and sets the permission priming message dialog that is showed prior to request the permission. \r\n In some cases where the dialog requesting the permission appears without any further notice and without enough context, permission priming will help you to put the user in context.\r\n - `themeId` is optional and allows to style the rationale alert dialog\r\n - `requestCode` is an integer to identify the request\r\n\r\nThe library makes sure that `onPermissionResult` is only called when the `requestCode` matches the user\r\ninput request code. Anyway, the `requestCode` is also returned in the callback params so that it can \r\nalso be checked against the original request code.\r\n\r\nAnd that's all it takes.\r\n\r\nIt is also possible to request the permissions inside fragments, just extend the parent activity from\r\n`AllowMeActivity` and steps above remain the same.\r\n\r\n## Priming vs rationale\r\n\r\nThe permission rationale dialog appears once the user has denied the permission perviously. It is \r\na way to explain the user why we need the permission. But sometimes the first permission request \r\nappears with little or no context and, it is then when priming is important.\r\nPriming message dialog, when defined, will appear in the first permission request helping to put the \r\nuser in context as to why the permission is required.\r\n\r\nIf the user decides not to go ahead after reading the priming message, the permission will not be requested \r\nagain and the user will need to go to device settings to grant it.\r\n\r\n# Use annotated methods instead of callbacks\r\n\r\nIt is possible to, instead of using callback methods, use annotations to define the method to be called\r\nwhen the permission request is performed.\r\n\r\n```java\r\n    \r\n    public class MyActivity extends AllowMeActivity {\r\n        \r\n        @Override\r\n        protected void onCreate(Bundle savedInstanceState) {\r\n            super.onCreate(savedInstanceState);\r\n            \r\n            //... more code here\r\n            \r\n            int requestCode = 69;\r\n            if (!AllowMe.isPermissionGranted(Manifest.permission.READ_CONTACTS)) {\r\n                new AllowMe.Builder()\r\n                        .setPermissions(Manifest.permission.READ_CONTACTS)\r\n                        .setRationale(rationale)\r\n                        .setPrimingMessage(primingMessage)\r\n                        .setRationaleThemeId(themeId)\r\n                        .requestPermissionForResult(MyActivity.this, requestCode);\r\n            } else {\r\n                //... handle permission already granted\r\n            }\r\n        }\r\n                \r\n        @OnPermissionResult(requestedPermissions = {Manifest.permission.READ_CONTACTS})\r\n        void permissionRequestHandler(int requestCode, PermissionResultSet result) {\r\n            //... handle result\r\n        }\r\n    }\r\n```\r\n\r\nThe annotation `OnPermissionResult` receives the list of requested permissions in `requestedPermissions` param.\r\n\r\nTo use the annotated method, a new `requestPermissionForResult` call should be used. This call receives two params:\r\n\r\n- `Object` with class the annotated method belongs to\r\n- `int` with the permission request code\r\n\r\nThe library will then call the annotated method to handle the permission request result.\r\n\r\nDeveloped By\r\n---\r\n\r\nAitor Viana Sanchez - aitor.viana.sanchez@gmail.com>\r\n\r\n<a href=\"https://twitter.com/aitorvs\">\r\n  <img alt=\"Follow me on Twitter\"\r\n       src=\"https://raw.github.com/ManuelPeinado/NumericPageIndicator/master/art/twitter.png\" />\r\n</a>\r\n<a href=\"https://plus.google.com/+AitorViana\">\r\n  <img alt=\"Follow me on Twitter\"\r\n       src=\"https://raw.github.com/ManuelPeinado/NumericPageIndicator/master/art/google-plus.png\" />\r\n</a>\r\n<a href=\"https://www.linkedin.com/in/aitorvs\">\r\n  <img alt=\"Follow me on Twitter\"\r\n       src=\"https://raw.github.com/ManuelPeinado/NumericPageIndicator/master/art/linkedin.png\" />\r\n       \r\n## License\r\n\r\n Apache 2.0\r\n\r\n    Copyright 2015 aitorvs, Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n        http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}